import type { Destination } from "@prisma/client";
import { PrismaClient } from "@prisma/client";
import type { GetStaticProps } from "next";
import Head from "next/head";
import { useState } from "react";
import Footer from "~/components/Footer";
import Navbar from "~/components/Navbar";
import AllTours from "~/components/page/tour/AllTours";
import FilterBox from "~/components/page/tour/FilterBox";
import SearchBox from "~/components/page/tour/SearchBox";
import Banner from "~/components/utility/Banner";
import type { TourWithDestination } from "~/types";

interface ToursPageProps {
  tours: TourWithDestination[];
  destinations: Destination[];
}

export default function Tours({ tours, destinations }: ToursPageProps) {
  const [selectedDestination, setSelectedDestination] =
    useState<Destination | null>(null);

  const filteredTours = selectedDestination
    ? tours.filter(
        (tour) =>
          tour.destination.place.toLowerCase() ===
          selectedDestination.place.toLowerCase()
      )
    : tours;

  return (
    <>
      <Head>
        <title>Maps Voyage</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <Navbar />
        <Banner img="/banner.jpg" title="Tours" />
        <div className="mx-auto grid max-w-7xl grid-cols-1 md:grid-cols-3">
          <div className="md:col-span-2">
            <AllTours filteredTours={filteredTours} />
          </div>
          <div className="flex flex-col">
            <SearchBox
              selectedDestination={selectedDestination}
              setSelectedDestination={setSelectedDestination}
              destinations={destinations}
            />
            <FilterBox />
          </div>
        </div>
        <Footer />
      </main>
    </>
  );
}

export const getStaticProps: GetStaticProps = async () => {
  const prisma = new PrismaClient();
  const tours = await prisma.tour.findMany({
    orderBy: { name: "asc" },
    select: {
      id: true,
      name: true,
      banner: true,
      rating: true,
      duration: true,
      groupSize: true,
      category: true,
      destination: { select: { place: true } },
    },
  });
  const destinations = await prisma.destination.findMany({
    orderBy: { place: "asc" },
    select: {
      id: true,
      place: true,
    },
  });
  await prisma.$disconnect();

  return {
    props: { tours, destinations },
  };
};
