import { PrismaClient } from "@prisma/client";
import Head from "next/head";
import Footer from "~/components/Footer";
import Navbar from "~/components/Navbar";
import About from "~/components/page/landing/About";
import Contact from "~/components/page/landing/Contact";
import Cta from "~/components/page/landing/Cta";
import Destinations from "~/components/page/landing/Destinations";
import Hero from "~/components/page/landing/Hero";
import Reviews from "~/components/page/landing/Reviews";
import Tours from "~/components/page/landing/Tours";

import type { Destination, Prisma } from "@prisma/client";
type TourWithDestination = Prisma.TourGetPayload<{
  include: { destination: true };
}>;

interface Props {
  destinations: Destination[];
  tours: TourWithDestination[];
}

export default function Home({ destinations, tours }: Props) {
  return (
    <>
      <Head>
        <title>Maps Voyage</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <Navbar />
        <Hero />
        <About />
        <Destinations destinations={destinations} />
        <Tours tours={tours} />
        <Reviews />
        {/* <Blogs /> */}
        <Cta />
        <Contact />
        <Footer />
      </main>
    </>
  );
}

export async function getStaticProps() {
  const prisma = new PrismaClient();
  const destinations = await prisma.destination.findMany({
    where: {
      featured: true,
    },
    take: 4,
  });

  const tours = await prisma.tour.findMany({
    include: {
      destination: true,
    },
    where: {
      featured: true,
    },
  });

  await prisma.$disconnect();

  return {
    props: { destinations, tours },
  };
}
