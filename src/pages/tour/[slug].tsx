import { PrismaClient } from "@prisma/client";
import type { GetServerSideProps } from "next";
import Head from "next/head";
import { useRouter } from "next/router";
import Footer from "~/components/Footer";
import Navbar from "~/components/Navbar";
import BookForm from "~/components/page/tour-detail/BookForm";
import Carousel from "~/components/page/tour-detail/Carousel";
import Hero from "~/components/page/tour-detail/Hero";
import Overview from "~/components/page/tour-detail/Overview";
import type { TourWithDestinationAndDays } from "~/types";

interface TourPageProps {
  tour: TourWithDestinationAndDays;
  images: string[];
}

export default function TourPage({ tour, images }: TourPageProps) {
  const router = useRouter();

  if (router.isFallback) {
    return <div>Loading...</div>;
  }

  return (
    <>
      <Head>
        <title>Maps Voyage</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <Navbar />
        <div className="mx-auto grid max-w-6xl grid-cols-1 gap-12 p-4 md:grid-cols-3">
          <div className="flex flex-col gap-4 md:col-span-2">
            <Hero tour={tour} />
            <Carousel images={images} />
            <Overview tour={tour} />
          </div>
          <BookForm />
        </div>
        <Footer />
      </main>
    </>
  );
}

export const getServerSideProps: GetServerSideProps = async (context) => {
  const id = context.params?.slug;

  if (id == null) throw new Error("Id undefined");

  const prisma = new PrismaClient();

  const tour = await prisma.tour.findUnique({
    where: { id: parseInt(id as string) },
    include: { destination: true, tourDays: true },
  });

  await prisma.$disconnect();

  const images = tour?.images.split(";");

  return {
    props: { tour, images },
  };
};
